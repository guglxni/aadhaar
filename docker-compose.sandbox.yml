version: '3.8'

services:
  uidai-auth:
    build: 
      context: .
      dockerfile: Dockerfile.sandbox
    container_name: uidai-sandbox-auth
    environment:
      # Application
      NODE_ENV: sandbox
      PORT: 3002
      LOG_LEVEL: debug
      
      # UIDAI Configuration (loaded from secrets)
      UIDAI_ENDPOINT: "https://developer.uidai.gov.in"
      UIDAI_PFX_B64: ${UIDAI_PFX_B64}
      UIDAI_PFX_PASS: ${UIDAI_PFX_PASS}
      UIDAI_LICENSE_KEY: ${UIDAI_LICENSE_KEY}
      UIDAI_ASA_LICENSE_KEY: ${UIDAI_ASA_LICENSE_KEY}
      UIDAI_AUA_CODE: ${UIDAI_AUA_CODE}
      
      # Security & Monitoring
      CORRELATION_ID_HEADER: x-correlation-id
      ENABLE_TRANSACTION_LOGGING: "true"
      SANDBOX_ARTIFACTS_PATH: "/sandbox-artifacts"
      
    volumes:
      # Transaction artifacts (outside container for audit)
      - ./sandbox-artifacts:/sandbox-artifacts
      # Certificates (read-only, loaded from secrets)
      - uidai-certs:/app/certs:ro
      
    ports:
      - "3002:3002"
      
    networks:
      - uidai-egress
      - internal
      
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    # Security constraints
    security_opt:
      - no-new-privileges:true
    read_only: false  # Need write for artifacts
    user: "1000:1000"
    
    depends_on:
      - cert-loader

  # Certificate loader (secure P12 handling with tmpfs)
  cert-loader:
    image: alpine:latest
    container_name: uidai-cert-loader
    environment:
      UIDAI_PFX_B64: ${UIDAI_PFX_B64}
      UIDAI_PFX_PASS: ${UIDAI_PFX_PASS}
    volumes:
      - uidai-certs:/certs
    tmpfs:
      - /tmp:noexec,nosuid,size=10m  # tmpfs for secure P12 handling
    command: |
      sh -c '
        echo "üîê Loading UIDAI certificates securely..."
        if [ -z "$$UIDAI_PFX_B64" ]; then
          echo "‚ùå ERROR: UIDAI_PFX_B64 not set"
          exit 1
        fi
        
        # Install required tools
        apk add --no-cache openssl ca-certificates curl
        
        # Decode P12 to tmpfs (vanishes on container stop)
        echo $$UIDAI_PFX_B64 | base64 -d > /tmp/aua.p12
        chmod 0400 /tmp/aua.p12
        
        # Extract components for xmlsec1 compatibility
        openssl pkcs12 -in /tmp/aua.p12 -out /certs/aua.pem -nodes -passin pass:$$UIDAI_PFX_PASS
        openssl pkcs12 -in /tmp/aua.p12 -out /certs/aua.key -nocerts -nodes -passin pass:$$UIDAI_PFX_PASS
        openssl pkcs12 -in /tmp/aua.p12 -out /certs/aua.crt -clcerts -nokeys -passin pass:$$UIDAI_PFX_PASS
        
        # Download AuthStaging25082025.cer (expires in 25 days - monitor!)
        echo "üì• Downloading UIDAI staging CA..."
        curl -f -o /certs/uidai_auth_stage.cer https://developer.uidai.gov.in/assets/cert/AuthStaging25082025.cer || {
          echo "‚ö†Ô∏è CA download failed - using local copy if available"
        }
        
        # Install staging CA in system trust store
        cp /certs/uidai_auth_stage.cer /usr/local/share/ca-certificates/uidai_staging.crt
        update-ca-certificates
        
        # Verify certificate chain
        echo "üîç Verifying certificate chain..."
        if openssl verify -CAfile /certs/uidai_auth_stage.cer /certs/aua.crt; then
          echo "‚úÖ Certificate chain verified"
        else
          echo "‚ùå Certificate chain verification failed"
          exit 1
        fi
        
        # Generate certificate fingerprint for audit
        CERT_FINGERPRINT=$(openssl x509 -in /certs/aua.crt -noout -sha256 -fingerprint | cut -d= -f2)
        echo "üìä AUA Certificate SHA-256: $CERT_FINGERPRINT"
        echo "$CERT_FINGERPRINT" > /certs/aua_fingerprint.txt
        
        # Secure permissions
        chmod 600 /certs/*
        chmod 644 /certs/uidai_auth_stage.cer /certs/aua_fingerprint.txt
        
        # Remove P12 from tmpfs (security)
        rm -f /tmp/aua.p12
        
        echo "üîê Certificate loading complete and secure"
        sleep 15  # Keep container alive briefly for volume sync
      '
    restart: "no"

networks:
  # Egress network for UIDAI communication (should map to static IP)
  uidai-egress:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    # In production: configure NAT gateway with static IP here
    
  # Internal network for service communication
  internal:
    driver: bridge
    internal: true

volumes:
  # Certificate storage (ephemeral, loaded from secrets)
  uidai-certs:
    driver: local 